hReact is JS library for bulding user interfaces.
Thrives on using components.

craete a react app (vite)
create a folder

npm create vite@latest
., react, react, javascript

npm install
npm run dev

CLEAN UP
1. css styles (app.css, index.css)
2. clear our app.jsx
APP.JSX (root component)
Navbar
Button
Anchor

create a react component
function
1. component must start with uppercase (e.g. Button, Video)
2. must return one sth (jsx element)


const Navbar = () => { 
return <div>
h1
p
</div>
}

react fragment <> </>

JSX (html)
1. every element must be closed <br /> <img src alt /> <hr></hr>
2. don't use class, use className
3. label htmlFor

Styling in react
1. global css (app.css, index.css)
2. Local css (selecting each components one by one)
3. inline css style = {{color: 'red', fontFamily: 'sans-serif'}}
4. external css library (tailwind)

working with Tailwind in REACT
1. npm install


objective 
1. create a react app using vite
2. customize your app
3. create components and nest them appropriately
4. style your components
5. working with images in react

function Button ({bg, color}) {

    return <button>sign Up</button>
}

<Button bg='red' color='white' />
<Button bg='black' color='white' />
const Hero = ()=>{
    <Button age={age} Job={"Programmer"}/>
}
props objects {age:76, Job:'programmer'}

const Button = ({age,job})=>{
    const {}
}
2. ternary operator 
const isSubmitting = true
isSubmitting ? 'Loading ...' : "Log in"
isUserLoggedIn ? 'Logout' : Login

3. short circuit evaluation logical operators && 

const isPasswordCorrect = true

isPasswordCorrect && 'Go and log in'

isPasswordCorrect  'log out'
true || true == true 

1. intall react 
2. customize your app
3.  create and nest components
4. style n react
5. working with images
6. dynamic Values
7. props, props destructuring, props CHILDREN
8. Outputting Lists (map)
9. responding to users event
10. Conditional rendering

adding interactivity

1. state management
a. useState

const [age, setAge] = useState(20)
setAge(age + 1)
const [user, setUser] = useState(null)
const [cart, setCart] = useState([])
setCart(['powerbank', 'phone'])



UI(styling) data

const myName = 'Ade'
data would have to change

//
UseEffect
it allow us to run functions on the inittail loading of the page 
and on every re render

custom hook

exort useFetch = (api) => {
  const [data, seData] = useState([])

}

controlled- inputs

<swiper>
testimonial.map((t) => {

})
 <swiperslide>1</swiperslide>
 <swiperslide>2</swiperslide>
 <swiperslide>3</swiperslide>
 <swiperslide>4</swiperslide>

 tailwind 
 react-icons
 react-loader

 axios - data fetching
 react-hook-forms
 yup

REACT ROUTER DOM
 SPA - single page application
 MPA - multiple pages application

npm i react-router-dom

pages, home,about, contact

react-router-dom -app.jsx

//navigation a href
<link to='/'>Home</link>
<link to='/about'>About</link>
<link to='/store'>Store</link>

error router
path= '*

redirecting - changing browser location
1. automatic
2. programmatic - redirecting after user action

dynamic route

timeline

tweet1 --> more details (like, retweet, comment)
tweet2 --> more details (like, retweet, comment)

OUTLET (children Route)

Navlink - special version of <link>
automatically applies an active class - styling
isActive

context api 
form


